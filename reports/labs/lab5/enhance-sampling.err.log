Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt

# === Parameters and binning ===
beta=1/T
nbins = 100
bin_edges = np.linspace(-1, 1, nbins + 1)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
P_unbiased = np.zeros(nbins)

# === Set up figure with 1 row, 2 columns ===
fig, ax = plt.subplots(1, 2, figsize=(12, 4))

# === Plot overlapping histograms ===
for mags in all_mags:
    ax[0].hist(mags, bins=bin_edges, density=True, alpha=0.5)
ax[0].set_xlabel("Magnetization $M$")
ax[0].set_ylabel("Probability Density")
ax[0].set_title("Umbrella Sampling: Histograms")

# === Reweight and compute unbiased distribution ===
for M0, mags in zip(M0_values, all_mags):

    # Compute effective bias potential using normalized m
    U = 0.5 * k_bias * N**4 * (mags - M0)**2
    weights = np.exp(beta * U)

    # Histogram
    hist, _ = np.histogram(m, bins=bin_edges, weights=weights)
    P_unbiased += hist

# Normalize the unbiased probability density
P_unbiased /= np.sum(P_unbiased * np.diff(bin_edges))

# Compute free energy: F(M) = -kT ln P(M)
F_reweighted = -np.log(P_unbiased + 1e-12)
F_reweighted -= np.nanmin(F_reweighted)

# === Plot F(M) ===
ax[1].plot(bin_centers, F_reweighted, lw=2)
ax[1].set_xlabel("Magnetization $M$")
ax[1].set_ylabel("Free Energy $F(M)$")
ax[1].set_title("Free Energy via Reweighting")
ax[1].grid(True)

plt.tight_layout()
plt.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[3], line 29[0m
[1;32m     26[0m     weights [38;5;241m=[39m np[38;5;241m.[39mexp(beta [38;5;241m*[39m U)
[1;32m     28[0m     [38;5;66;03m# Histogram[39;00m
[0;32m---> 29[0m     hist, _ [38;5;241m=[39m np[38;5;241m.[39mhistogram([43mm[49m, bins[38;5;241m=[39mbin_edges, weights[38;5;241m=[39mweights)
[1;32m     30[0m     P_unbiased [38;5;241m+[39m[38;5;241m=[39m hist
[1;32m     32[0m [38;5;66;03m# Normalize the unbiased probability density[39;00m

[0;31mNameError[0m: name 'm' is not defined

