Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt

# === Assume you have: ===
# - M_all: concatenated array of all magnetizations (normalized)
# - M0_values: umbrella centers used in the simulations
# - all_mags: list of magnetization samples per umbrella window
# - beta, k_bias, N, nbins

# Histogram setup
nbins = 100
bin_edges = np.linspace(-1, 1, nbins + 1)
bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])
P_unbiased = np.zeros(nbins)

# Loop over windows and reweight each sample
for M0, mags in zip(M0_values, all_mags):
    weights = np.exp(beta * 0.5 * k_bias * (mags * N**2 - M0)**2)  # undo the bias
    hist, _ = np.histogram(mags, bins=bin_edges, weights=weights)
    P_unbiased += hist

# Normalize probability
P_unbiased /= np.sum(P_unbiased * np.diff(bin_edges))

# Convert to free energy
F_reweighted = -np.log(P_unbiased + 1e-12)  # add small value to avoid log(0)
F_reweighted -= np.nanmin(F_reweighted)

# === Plot ===
plt.plot(bin_centers, F_reweighted, label="Histogram Reweighting (NumPy)", lw=2)
plt.xlabel("Magnetization $M$")
plt.ylabel("Free Energy $F(M)$")
plt.title("Free Energy via Simple Histogram Reweighting")
plt.grid(True)
plt.tight_layout()
plt.legend()
plt.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[4], line 18[0m
[1;32m     16[0m [38;5;66;03m# Loop over windows and reweight each sample[39;00m
[1;32m     17[0m [38;5;28;01mfor[39;00m M0, mags [38;5;129;01min[39;00m [38;5;28mzip[39m(M0_values, all_mags):
[0;32m---> 18[0m     weights [38;5;241m=[39m np[38;5;241m.[39mexp([43mbeta[49m [38;5;241m*[39m [38;5;241m0.5[39m [38;5;241m*[39m k_bias [38;5;241m*[39m (mags [38;5;241m*[39m N[38;5;241m*[39m[38;5;241m*[39m[38;5;241m2[39m [38;5;241m-[39m M0)[38;5;241m*[39m[38;5;241m*[39m[38;5;241m2[39m)  [38;5;66;03m# undo the bias[39;00m
[1;32m     19[0m     hist, _ [38;5;241m=[39m np[38;5;241m.[39mhistogram(mags, bins[38;5;241m=[39mbin_edges, weights[38;5;241m=[39mweights)
[1;32m     20[0m     P_unbiased [38;5;241m+[39m[38;5;241m=[39m hist

[0;31mNameError[0m: name 'beta' is not defined

