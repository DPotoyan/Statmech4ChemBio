Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
from scipy.optimize import newton

def partition_function(B):
    x = np.array([1, 2, 3, 4, 5, 6])
    return np.sum(np.exp(-B * x))

def expected_value(B):
    x = np.array([1, 2, 3, 4, 5, 6])
    Z = partition_function(B)
    p = np.exp(-B * x) / Z
    return np.sum(x * p)

def objective_function(B):
    return expected_value(B) - 5.5

def objective_derivative(B):
    x = np.array([1, 2, 3, 4, 5, 6])
    Z = partition_function(B)
    p = np.exp(-B * x) / Z
    return -np.sum(x**2 * p) + np.sum(x * p) ** 2

# Find optimal B using Newton's method
B_opt = newton(objective_function, x0=0.1, fprime=objective_derivative)

# Compute final probability distribution
x = np.array([1, 2, 3, 4, 5, 6])
Z = partition_function(B_opt)
optimal_p = np.exp(-B_opt * x) / Z

# Print results
print(f"Optimal B: {B_opt}")
print("Optimized probability distribution:")
for i, p in enumerate(p_opt, 1):
    print(f"P({i}) = {p:.4f}")


# Plot the resulting probability distribution
plt.figure(figsize=(8, 5))
plt.bar(x, optimal_p, color='royalblue', alpha=0.7, edgecolor='black')
plt.xlabel("Die Outcome", fontsize=14)
plt.ylabel("Probability", fontsize=14)
plt.title("Optimized MaxEnt Probability Distribution for a Biased Die", fontsize=16)
plt.xticks(x)
plt.grid(axis="y", linestyle="--", alpha=0.6)

------------------

----- stdout -----
Optimal B: -1.086963747049358
Optimized probability distribution:
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[2], line 34[0m
[1;32m     32[0m [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mOptimal B: [39m[38;5;132;01m{[39;00mB_opt[38;5;132;01m}[39;00m[38;5;124m"[39m)
[1;32m     33[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mOptimized probability distribution:[39m[38;5;124m"[39m)
[0;32m---> 34[0m [38;5;28;01mfor[39;00m i, p [38;5;129;01min[39;00m [38;5;28menumerate[39m([43mp_opt[49m, [38;5;241m1[39m):
[1;32m     35[0m     [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mP([39m[38;5;132;01m{[39;00mi[38;5;132;01m}[39;00m[38;5;124m) = [39m[38;5;132;01m{[39;00mp[38;5;132;01m:[39;00m[38;5;124m.4f[39m[38;5;132;01m}[39;00m[38;5;124m"[39m)
[1;32m     38[0m [38;5;66;03m# Plot the resulting probability distribution[39;00m

[0;31mNameError[0m: name 'p_opt' is not defined

