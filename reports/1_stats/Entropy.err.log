Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt

def binary_entropy(p):
    """
    Compute the binary Shannon entropy for a given probability p.
    Avoid issues with log(0) by ensuring p is never 0 or 1.
    """
    return -p * np.log2(p) - (1 - p) * np.log2(1 - p)

# Generate probability values, avoiding the endpoints to prevent log(0)
p_vals = np.linspace(0.001, 0.999, 1000)
H_vals = binary_entropy(p_vals)

# Create a figure with two subplots side-by-side
fig, ax = plt.subplots(1, 2, figsize=(14, 6))

# Plot 1: Binary Shannon Entropy Function
ax[0].plot(p_vals, H_vals, lw=2, color='midnightblue',
           label=r"$H(p)=-p\log_2(p)-(1-p)\log_2(1-p)$")
ax[0].set_xlabel(r"Probability $p$)", fontsize=14)
ax[0].set_ylabel("Entropy (bits)", fontsize=14)
ax[0].set_title("Binary Shannon Entropy", lw=4, fontsize=16)
ax[0].legend(fontsize=12)
ax[0].grid(True)

# Plot 2: Example Distributions and Their Entropy
# Define a few example two-outcome distributions:
distributions = {
    "Uniform (0.5, 0.5)": [0.5, 0.5],
    "Skewed (0.8, 0.2)": [0.8, 0.2],
    "Extreme (0.99, 0.01)": [0.99, 0.01]
}

# Colors for each distribution
colors = ["skyblue", "salmon", "lightgreen"]

# For visual separation, use offsets for the bars
width = 0.25
x_ticks = np.arange(2)  # positions for the two outcomes

for i, (label, probs) in enumerate(distributions.items()):
    # Compute the Shannon entropy for the distribution
    entropy_val = -np.sum(np.array(probs) * np.log2(probs))
    # Offset x positions for clarity
    x_positions = x_ticks + i * width - width
    ax[1].bar(x_positions, probs, width=width, color=colors[i],
              label=f"{label}\nEntropy = {entropy_val:.2f} bits")
    
# Set labels and title for the bar plot
ax[1].set_xticks(x_ticks)
ax[1].set_xticklabels(["Outcome 1", "Outcome 2"], fontsize=12)
ax[1].set_ylabel("Probability", fontsize=14)
ax[1].set_title("Example Distributions", fontsize=16)
ax[1].legend(fontsize=12)
ax[1].grid(True, axis='y')

plt.tight_layout()
plt.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[1], line 23[0m
[1;32m     21[0m ax[[38;5;241m0[39m][38;5;241m.[39mset_xlabel([38;5;124mr[39m[38;5;124m"[39m[38;5;124mProbability $p$)[39m[38;5;124m"[39m, fontsize[38;5;241m=[39m[38;5;241m14[39m)
[1;32m     22[0m ax[[38;5;241m0[39m][38;5;241m.[39mset_ylabel([38;5;124m"[39m[38;5;124mEntropy (bits)[39m[38;5;124m"[39m, fontsize[38;5;241m=[39m[38;5;241m14[39m)
[0;32m---> 23[0m [43max[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[38;5;241;43m.[39;49m[43mset_title[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mBinary Shannon Entropy[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mlw[49m[38;5;241;43m=[39;49m[38;5;241;43m4[39;49m[43m,[49m[43m [49m[43mfontsize[49m[38;5;241;43m=[39;49m[38;5;241;43m16[39;49m[43m)[49m
[1;32m     24[0m ax[[38;5;241m0[39m][38;5;241m.[39mlegend(fontsize[38;5;241m=[39m[38;5;241m12[39m)
[1;32m     25[0m ax[[38;5;241m0[39m][38;5;241m.[39mgrid([38;5;28;01mTrue[39;00m)

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/matplotlib/axes/_axes.py:180[0m, in [0;36mAxes.set_title[0;34m(self, label, fontdict, loc, pad, y, **kwargs)[0m
[1;32m    178[0m [38;5;28;01mif[39;00m fontdict [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m    179[0m     title[38;5;241m.[39mupdate(fontdict)
[0;32m--> 180[0m [43mtitle[49m[38;5;241;43m.[39;49m[43m_internal_update[49m[43m([49m[43mkwargs[49m[43m)[49m
[1;32m    181[0m [38;5;28;01mreturn[39;00m title

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/matplotlib/artist.py:1223[0m, in [0;36mArtist._internal_update[0;34m(self, kwargs)[0m
[1;32m   1216[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21m_internal_update[39m([38;5;28mself[39m, kwargs):
[1;32m   1217[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m   1218[0m [38;5;124;03m    Update artist properties without prenormalizing them, but generating[39;00m
[1;32m   1219[0m [38;5;124;03m    errors as if calling `set`.[39;00m
[1;32m   1220[0m 
[1;32m   1221[0m [38;5;124;03m    The lack of prenormalization is to maintain backcompatibility.[39;00m
[1;32m   1222[0m [38;5;124;03m    """[39;00m
[0;32m-> 1223[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_update_props[49m[43m([49m
[1;32m   1224[0m [43m        [49m[43mkwargs[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;132;43;01m{cls.__name__}[39;49;00m[38;5;124;43m.set() got an unexpected keyword argument [39;49m[38;5;124;43m"[39;49m
[1;32m   1225[0m [43m        [49m[38;5;124;43m"[39;49m[38;5;132;43;01m{prop_name!r}[39;49;00m[38;5;124;43m"[39;49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/matplotlib/artist.py:1197[0m, in [0;36mArtist._update_props[0;34m(self, props, errfmt)[0m
[1;32m   1195[0m             func [38;5;241m=[39m [38;5;28mgetattr[39m([38;5;28mself[39m, [38;5;124mf[39m[38;5;124m"[39m[38;5;124mset_[39m[38;5;132;01m{[39;00mk[38;5;132;01m}[39;00m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[1;32m   1196[0m             [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mcallable[39m(func):
[0;32m-> 1197[0m                 [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(
[1;32m   1198[0m                     errfmt[38;5;241m.[39mformat([38;5;28mcls[39m[38;5;241m=[39m[38;5;28mtype[39m([38;5;28mself[39m), prop_name[38;5;241m=[39mk))
[1;32m   1199[0m             ret[38;5;241m.[39mappend(func(v))
[1;32m   1200[0m [38;5;28;01mif[39;00m ret:

[0;31mAttributeError[0m: Text.set() got an unexpected keyword argument 'lw'

