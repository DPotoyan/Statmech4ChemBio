Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# Define parameters
D = 1.0  # Diffusion coefficient
t1 = 1.0  # Time for first Gaussian
t2 = 2.0  # Time for second Gaussian
sigma1 = np.sqrt(2 * D * t1)  # Standard deviation at t1
sigma2 = np.sqrt(2 * D * t2)  # Standard deviation at t2

# Define grid for discretization
x_min, x_max = -5, 5  # Range of x values
num_bins_list = [10, 50, 100, 500]  # Different resolutions

# Compute Shannon entropy for discretized Gaussian
shannon_entropies = []

for num_bins in num_bins_list:
    x_bins = np.linspace(x_min, x_max, num_bins + 1)  # Bin edges
    x_centers = (x_bins[:-1] + x_bins[1:]) / 2  # Bin centers
    dx = x_bins[1] - x_bins[0]  # Bin width
    
    # Compute probability mass function for discretized Gaussian
    p_i = stats.norm.pdf(x_centers, 0, sigma1) * dx
    p_i = p_i / np.sum(p_i)  # Normalize

    # Compute Shannon entropy
    S_shannon = -np.sum(p_i * np.log(p_i + 1e-10))  # Avoid log(0)
    shannon_entropies.append(S_shannon)

# Compute differential entropy for continuous Gaussian
S_diff = 0.5 * np.log(4 * np.pi * np.e * D * t1)

# Compute KL divergence between Gaussians at t1 and t2
KL_div = 0.5 * ((t1 / t2) - 1 + np.log(t2 / t1))

# Plot Shannon entropy vs. grid resolution
plt.figure(figsize=(6,4))
plt.plot(num_bins_list, shannon_entropies, 'o-', label='Shannon Entropy')
plt.axhline(y=S_diff, color='r', linestyle='--', label='Differential Entropy')
plt.xlabel('Number of Bins')
plt.ylabel('Entropy')
plt.title('Shannon Entropy vs. Grid Resolution')
plt.legend()
plt.xscale('log')
plt.grid()
plt.show()

# Display results
import pandas as pd
df = pd.DataFrame({
    "Grid Size (Bins)": num_bins_list,
    "Shannon Entropy": shannon_entropies
})
import ace_tools as tools
tools.display_dataframe_to_user(name="Shannon Entropy Computation", dataframe=df)

# Display final computed entropies
{"Differential Entropy": S_diff, "KL Divergence (t1 vs. t2)": KL_div}

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[3], line 56[0m
[1;32m     51[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mpd[39;00m
[1;32m     52[0m df [38;5;241m=[39m pd[38;5;241m.[39mDataFrame({
[1;32m     53[0m     [38;5;124m"[39m[38;5;124mGrid Size (Bins)[39m[38;5;124m"[39m: num_bins_list,
[1;32m     54[0m     [38;5;124m"[39m[38;5;124mShannon Entropy[39m[38;5;124m"[39m: shannon_entropies
[1;32m     55[0m })
[0;32m---> 56[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mace_tools[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mtools[39;00m
[1;32m     57[0m tools[38;5;241m.[39mdisplay_dataframe_to_user(name[38;5;241m=[39m[38;5;124m"[39m[38;5;124mShannon Entropy Computation[39m[38;5;124m"[39m, dataframe[38;5;241m=[39mdf)
[1;32m     59[0m [38;5;66;03m# Display final computed entropies[39;00m

[0;31mModuleNotFoundError[0m: No module named 'ace_tools'

