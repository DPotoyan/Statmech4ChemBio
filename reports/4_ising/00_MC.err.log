Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def triangular_pdf(x, a, b, c):
    """Triangular distribution PDF."""
    if a <= x < c:
        return 2 * (x - a) / ((b - a) * (c - a))
    elif c <= x <= b:
        return 2 * (b - x) / ((b - a) * (b - c))
    else:
        return 0

def rejection_sampling_triangular(n_samples, a, b, c):
    """
    Rejection sampling from a triangular distribution.

    Parameters:
    - n_samples: Number of samples to generate.
    - a: Minimum value of the triangular distribution.
    - b: Maximum value of the triangular distribution.
    - c: Mode (peak) of the triangular distribution.

    Returns:
    - samples: Array of generated samples.
    """
    samples = []

    # Proposal distribution is uniform on [a, b]
    proposal_sampler = lambda: np.random.uniform(a, b)

    # Find the maximum value of the triangular PDF for normalization
    max_pdf = triangular_pdf(c, a, b, c)

    while len(samples) < n_samples:
        # Step 1: Generate a proposal sample
        x = proposal_sampler()

        # Step 2: Generate a uniform random number for acceptance criterion
        u = npr.uniform(0, max_pdf)

        # Step 3: Accept or reject the sample based on the triangular PDF
        if u <= triangular_pdf(x, a, b, c):
            samples.append(x)

    return np.array(samples)

# Parameters for the triangular distribution
a = 0   # Minimum
b = 10  # Maximum
c = 5   # Mode

# Generate samples using rejection sampling
n_samples = 10000
samples = rejection_sampling_triangular(n_samples, a, b, c)

# Plot the samples
plt.hist(samples, bins=50, density=True, alpha=0.6, color='blue', label='Samples')

# Plot the triangular PDF for comparison
x_vals = np.linspace(a, b, 1000)
pdf_vals = [triangular_pdf(x, a, b, c) for x in x_vals]
plt.plot(x_vals, pdf_vals, label='Triangular PDF', color='red', lw=2)

plt.xlabel('x')
plt.ylabel('Density')
plt.title('Rejection Sampling from Triangular Distribution')
plt.legend()
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[12], line 51[0m
[1;32m     49[0m [38;5;66;03m# Generate samples using rejection sampling[39;00m
[1;32m     50[0m n_samples [38;5;241m=[39m [38;5;241m10000[39m
[0;32m---> 51[0m samples [38;5;241m=[39m [43mrejection_sampling_triangular[49m[43m([49m[43mn_samples[49m[43m,[49m[43m [49m[43ma[49m[43m,[49m[43m [49m[43mb[49m[43m,[49m[43m [49m[43mc[49m[43m)[49m
[1;32m     53[0m [38;5;66;03m# Plot the samples[39;00m
[1;32m     54[0m plt[38;5;241m.[39mhist(samples, bins[38;5;241m=[39m[38;5;241m50[39m, density[38;5;241m=[39m[38;5;28;01mTrue[39;00m, alpha[38;5;241m=[39m[38;5;241m0.6[39m, color[38;5;241m=[39m[38;5;124m'[39m[38;5;124mblue[39m[38;5;124m'[39m, label[38;5;241m=[39m[38;5;124m'[39m[38;5;124mSamples[39m[38;5;124m'[39m)

Cell [0;32mIn[12], line 36[0m, in [0;36mrejection_sampling_triangular[0;34m(n_samples, a, b, c)[0m
[1;32m     33[0m x [38;5;241m=[39m proposal_sampler()
[1;32m     35[0m [38;5;66;03m# Step 2: Generate a uniform random number for acceptance criterion[39;00m
[0;32m---> 36[0m u [38;5;241m=[39m [43mnpr[49m[38;5;241m.[39muniform([38;5;241m0[39m, max_pdf)
[1;32m     38[0m [38;5;66;03m# Step 3: Accept or reject the sample based on the triangular PDF[39;00m
[1;32m     39[0m [38;5;28;01mif[39;00m u [38;5;241m<[39m[38;5;241m=[39m triangular_pdf(x, a, b, c):

[0;31mNameError[0m: name 'npr' is not defined

